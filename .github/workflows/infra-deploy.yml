name: Infrastructure and Logger App Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Provision Infrastructure and Deploy Logger App
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306

    steps:
      # Checkout code from GitHub repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      # Configure AWS Credentials for Terraform
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Initialize Terraform and apply using the 'infra' directory
      - name: Terraform Init
        run: terraform init -backend-config=infra/backend.hcl
        working-directory: infra/

      - name: Terraform Plan
        run: terraform plan
        working-directory: infra/

      # Terraform Apply to provision infrastructure
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: infra/

      # Save Terraform output to JSON
      - name: Save Terraform output to JSON
        run: terraform output -json > tf-output.json
        working-directory: infra/

      # Print raw contents of tf-output.json
      - name: Print raw contents of tf-output.json
        run: |
          echo "----- tf-output.json contents -----"
          cat tf-output.json
          echo "-----------------------------------"
        working-directory: infra/

      # Validate the tf-output.json format
      - name: Validate tf-output.json
        run: |
          echo "✅ Validating tf-output.json..."
          if ! jq . tf-output.json > /dev/null 2>&1; then
            echo "❌ Invalid JSON format in tf-output.json"
            exit 1
          fi
        working-directory: infra/

      # Debugging - Show tf-output.json
      - name: Debug - Show tf-output.json
        run: cat tf-output.json
        working-directory: infra/

      # Extract EC2 Public IP from the Terraform output JSON
      - name: Extract EC2 Public IP
        id: extract-ip
        run: |
          echo "Parsing tf-output.json for public_ip"
          IP=$(jq -r '.public_ip.value' tf-output.json)
          echo "✅ Extracted IP: $IP"
          echo "EC2_IP=$IP" >> $GITHUB_ENV
        working-directory: infra/


      # Wait for MySQL to be ready
      - name: Wait for MySQL to be Ready
        run: |
          echo "Waiting for MySQL..."
          for i in {1..60}; do
            if mysqladmin ping -h127.0.0.1 -uroot -p"${{ secrets.MYSQL_PASSWORD }}" --silent; then
              echo "✅ MySQL is up!"
              break
            fi
            echo "⏳ Waiting... ($i/60)"
            sleep 2
          done

      # Verify MySQL connection
      - name: Verify MySQL Connection
        run: |
          mysql -h 127.0.0.1 -uroot -p"${{ secrets.MYSQL_PASSWORD }}" -e "SHOW DATABASES;"

      # Build Logger App using Maven (current directory)
      - name: Build App with Maven
        run: mvn clean install

      # Upload built JAR as artifact (current directory)
      - name: Upload Built Jar
        uses: actions/upload-artifact@v4
        with:
          name: logger-jar
          path: target/*.jar

      # Copy the JAR file to EC2 instance (current directory)
      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.EC2_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "target/*.jar"
          target: "~/logger-app/"

      # Run the Logger App on EC2 (current directory)
      - name: Run App on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            pkill -f 'java' || true
            nohup java -jar ~/logger-app/*.jar > logger.log 2>&1 &
